//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CmdPrompt
{
    
    
    public partial class CommandSyntax
    {
        
        public interface IState0
        {
            
            IState2 AddCommand(string name, string description = null);
        }
        
        public interface IState1
        {
        }
        
        public interface IState2
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState4 WithArgument<T>(string name, string description = null)
            ;
            
            IState3 OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments);
        }
        
        public interface IState3
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState5 WithArgument<T>(string name, string description = null)
            ;
        }
        
        public interface IState4
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState4 WithArgument<T>(string name, string description = null)
            ;
            
            IState3 OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments);
            
            IState9 IsOptional();
            
            IState6 IsDefault();
            
            IState4 WithAlias(string alias);
        }
        
        public interface IState5
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState5 WithArgument<T>(string name, string description = null)
            ;
            
            IState10 IsOptional();
            
            IState8 IsDefault();
            
            IState5 WithAlias(string alias);
        }
        
        public interface IState6
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState6 WithArgument<T>(string name, string description = null)
            ;
            
            IState7 OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments);
            
            IState11 IsOptional();
            
            IState6 WithAlias(string alias);
        }
        
        public interface IState7
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState8 WithArgument<T>(string name, string description = null)
            ;
        }
        
        public interface IState8
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState8 WithArgument<T>(string name, string description = null)
            ;
            
            IState12 IsOptional();
            
            IState8 WithAlias(string alias);
        }
        
        public interface IState9
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState4 WithArgument<T>(string name, string description = null)
            ;
            
            IState3 OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments);
            
            IState11 IsDefault();
            
            IState9 WithAlias(string alias);
        }
        
        public interface IState10
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState5 WithArgument<T>(string name, string description = null)
            ;
            
            IState12 IsDefault();
            
            IState10 WithAlias(string alias);
        }
        
        public interface IState11
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState6 WithArgument<T>(string name, string description = null)
            ;
            
            IState7 OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments);
            
            IState11 WithAlias(string alias);
        }
        
        public interface IState12
        {
            
            IState2 AddCommand(string name, string description = null);
            
            IState8 WithArgument<T>(string name, string description = null)
            ;
            
            IState12 WithAlias(string alias);
        }
        
        internal abstract class SyntaxImplementer : IState0, IState1, IState2, IState3, IState4, IState5, IState6, IState7, IState8, IState9, IState10, IState11, IState12
        {
            
            protected abstract SyntaxImplementer InnerAddCommand(string name, string description = null);
            
            protected abstract SyntaxImplementer InnerWithArgument<T>(string name, string description = null)
            ;
            
            protected abstract SyntaxImplementer InnerOnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments);
            
            protected abstract SyntaxImplementer InnerIsOptional();
            
            protected abstract SyntaxImplementer InnerIsDefault();
            
            protected abstract SyntaxImplementer InnerWithAlias(string alias);
            
            IState2 IState0.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState2 IState2.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState4 IState2.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState3 IState2.OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments)
            {
                return this.InnerOnExecute(arguments);
            }
            
            IState2 IState3.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState5 IState3.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState2 IState4.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState4 IState4.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState3 IState4.OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments)
            {
                return this.InnerOnExecute(arguments);
            }
            
            IState9 IState4.IsOptional()
            {
                return this.InnerIsOptional();
            }
            
            IState6 IState4.IsDefault()
            {
                return this.InnerIsDefault();
            }
            
            IState4 IState4.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState5.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState5 IState5.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState10 IState5.IsOptional()
            {
                return this.InnerIsOptional();
            }
            
            IState8 IState5.IsDefault()
            {
                return this.InnerIsDefault();
            }
            
            IState5 IState5.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState6.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState6 IState6.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState7 IState6.OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments)
            {
                return this.InnerOnExecute(arguments);
            }
            
            IState11 IState6.IsOptional()
            {
                return this.InnerIsOptional();
            }
            
            IState6 IState6.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState7.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState8 IState7.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState2 IState8.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState8 IState8.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState12 IState8.IsOptional()
            {
                return this.InnerIsOptional();
            }
            
            IState8 IState8.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState9.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState4 IState9.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState3 IState9.OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments)
            {
                return this.InnerOnExecute(arguments);
            }
            
            IState11 IState9.IsDefault()
            {
                return this.InnerIsDefault();
            }
            
            IState9 IState9.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState10.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState5 IState10.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState12 IState10.IsDefault()
            {
                return this.InnerIsDefault();
            }
            
            IState10 IState10.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState11.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState6 IState11.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState7 IState11.OnExecute(System.Action<CmdPrompt.CommandPrompt, System.Collections.Generic.IDictionary<string, object>> arguments)
            {
                return this.InnerOnExecute(arguments);
            }
            
            IState11 IState11.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
            
            IState2 IState12.AddCommand(string name, string description = null)
            {
                return this.InnerAddCommand(name, description);
            }
            
            IState8 IState12.WithArgument<T>(string name, string description = null)
            
            {
                return this.InnerWithArgument<T>(name, description);
            }
            
            IState12 IState12.WithAlias(string alias)
            {
                return this.InnerWithAlias(alias);
            }
        }
    }
}
